{"version":3,"sources":["../src/index.js"],"names":["debug","cloneDeep","isIdentifier","isMemberExpression","isImportDefaultSpecifier","variableDeclaration","variableDeclarator","memberExpression","callExpression","identifier","types","uniqueFn","api","options","assertVersion","importName","onlyMatchImportSuffix","strip","compile","path","uniqueId","source","node","quasis","reduce","head","quasi","value","raw","expressions","get","forEach","expr","buildCodeFrameError","queryDocument","definitions","length","definition","name","Error","body","uniqueUsed","definitionsProperty","properties","find","property","key","definitionsArray","extraDefinitions","map","allDefinitions","visitor","Program","programPath","tagNames","pendingDeletion","scope","generateUidIdentifier","hasError","traverse","ImportDeclaration","pathValue","endsWith","defaultSpecifier","specifiers","specifier","push","local","TaggedTemplateExpression","some","tag","used","replaceWith","error","console","pathForDeletion","remove","filter","unshiftContainer"],"mappings":"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","sourcesContent":["// @flow\n\nimport {types} from '@babel/core';\nimport {declare} from '@babel/helper-plugin-utils';\nimport {parseExpression} from '@babel/parser';\nimport parseLiteral from 'babel-literal-to-ast';\nimport gql from 'graphql-tag';\nimport createDebug from 'debug';\nimport {stripIgnoredCharacters} from 'graphql';\n\nconst debug = createDebug('babel-plugin-graphql-tag');\nconst {\n  cloneDeep,\n  isIdentifier,\n  isMemberExpression,\n  isImportDefaultSpecifier,\n  variableDeclaration,\n  variableDeclarator,\n  memberExpression,\n  callExpression,\n  identifier\n} = types;\n\n// eslint-disable-next-line no-restricted-syntax\nconst uniqueFn = parseExpression(`\n  (definitions) => {\n    const names = {};\n    return definitions.filter(definition => {\n      if (definition.kind !== 'FragmentDefinition') {\n        return true;\n      }\n      const name = definition.name.value;\n      if (names[name]) {\n        return false;\n      } else {\n        names[name] = true;\n        return true;\n      }\n    });\n  }\n`);\n\nexport default declare((api, options) => {\n  api.assertVersion(7);\n  const {\n    importName = 'graphql-tag',\n    onlyMatchImportSuffix = false,\n    strip = false\n  } = options;\n\n  const compile = (path: Object, uniqueId) => {\n    const source = path.node.quasis.reduce((head, quasi) => {\n      return head + quasi.value.raw;\n    }, '');\n\n    const expressions = path.get('expressions');\n\n    expressions.forEach((expr) => {\n      if (!isIdentifier(expr) && !isMemberExpression(expr)) {\n        throw expr.buildCodeFrameError(\n          'Only identifiers or member expressions are allowed by this plugin as an interpolation in a graphql template literal.',\n        );\n      }\n    });\n\n    debug('compiling a GraphQL query', source);\n\n    const queryDocument = gql(strip ? stripIgnoredCharacters(source) : source);\n\n    // If a document contains only one operation, that operation may be unnamed:\n    // https://facebook.github.io/graphql/#sec-Language.Query-Document\n    if (queryDocument.definitions.length > 1) {\n      for (const definition of queryDocument.definitions) {\n        if (!definition.name) {\n          throw new Error('GraphQL query must have name.');\n        }\n      }\n    }\n\n    const body = parseLiteral(queryDocument);\n    let uniqueUsed = false;\n\n    if (expressions.length) {\n      const definitionsProperty = body.properties.find((property) => {\n        return property.key.value === 'definitions';\n      });\n\n      const definitionsArray = definitionsProperty.value;\n\n      const extraDefinitions = expressions.map((expr) => {\n        return memberExpression(expr.node, identifier('definitions'));\n      });\n\n      const allDefinitions = callExpression(\n        memberExpression(definitionsArray, identifier('concat')),\n        extraDefinitions,\n      );\n\n      definitionsProperty.value = callExpression(uniqueId, [allDefinitions]);\n\n      uniqueUsed = true;\n    }\n\n    debug('created a static representation', body);\n\n    return [body, uniqueUsed];\n  };\n\n  return {\n    visitor: {\n      Program (programPath: Object) {\n        const tagNames = [];\n        const pendingDeletion = [];\n        const uniqueId = programPath.scope.generateUidIdentifier('unique');\n        let uniqueUsed = false;\n        let hasError = false;\n\n        programPath.traverse({\n          ImportDeclaration (path: Object) {\n            const pathValue = path.node.source.value;\n            if (onlyMatchImportSuffix ? pathValue.endsWith(importName) : pathValue === importName) {\n              const defaultSpecifier = path.node.specifiers.find((specifier) => {\n                return isImportDefaultSpecifier(specifier);\n              });\n\n              if (defaultSpecifier) {\n                tagNames.push(defaultSpecifier.local.name);\n                pendingDeletion.push({\n                  defaultSpecifier,\n                  path\n                });\n              }\n            }\n          },\n          TaggedTemplateExpression (path: Object) {\n            if (\n              tagNames.some((name) => {\n                return isIdentifier(path.node.tag, {name});\n              })\n            ) {\n              try {\n                debug('quasi', path.node.quasi);\n                const [body, used] = compile(path.get('quasi'), uniqueId);\n\n                uniqueUsed = uniqueUsed || used;\n\n                path.replaceWith(body);\n              } catch (error) {\n                // eslint-disable-next-line no-console\n                console.error('error', error);\n                hasError = true;\n              }\n            }\n          }\n        });\n\n        // Only delete import statement or specifier when there is no error\n        if (!hasError) {\n          for (const {defaultSpecifier, path: pathForDeletion} of pendingDeletion) {\n            if (pathForDeletion.node.specifiers.length === 1) {\n              pathForDeletion.remove();\n            } else {\n              pathForDeletion.node.specifiers = pathForDeletion.node.specifiers.filter((specifier) => {\n                return specifier !== defaultSpecifier;\n              });\n            }\n          }\n        }\n\n        if (uniqueUsed) {\n          programPath.unshiftContainer(\n            'body',\n            variableDeclaration('const', [variableDeclarator(uniqueId, cloneDeep(uniqueFn))]),\n          );\n        }\n      }\n    }\n  };\n});\n"],"file":"index.js"}